<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="F_IsAnyEqualToUnionValue" Id="{1ab30776-5b8c-4eb4-8ece-b0c087a9b905}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION F_IsAnyEqualToUnionValue : BOOL
VAR_INPUT
    uExpectedOrActual : U_ExpectedOrActual;
    ExpectedOrActualSize : UDINT;
    ExpectedOrActualTypeClass : IBaseLibrary.TypeClass;
    ExpectedOrActualValue : POINTER TO BYTE;
END_VAR
VAR
    AnyExpectedOrActual : U_ExpectedOrActual;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[AnyExpectedOrActual := F_AnyToUnionValue(AnySize := ExpectedOrActualSize,
                                         AnyTypeClass := ExpectedOrActualTypeClass,
                                         AnyValue := ExpectedOrActualValue);

CASE ExpectedOrActualTypeClass OF

    IBaseLibrary.TypeClass.TYPE_BOOL :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.boolExpectedOrActual = AnyExpectedOrActual.boolExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_BIT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.bitExpectedOrActual = AnyExpectedOrActual.bitExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_BYTE :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.byteExpectedOrActual = AnyExpectedOrActual.byteExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_WORD :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.wordExpectedOrActual = AnyExpectedOrActual.wordExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_DWORD :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.dwordExpectedOrActual = AnyExpectedOrActual.dwordExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_LWORD :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.lwordExpectedOrActual = AnyExpectedOrActual.lwordExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_SINT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.sintExpectedOrActual = AnyExpectedOrActual.sintExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_INT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.intExpectedOrActual = AnyExpectedOrActual.intExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_DINT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.dintExpectedOrActual = AnyExpectedOrActual.dintExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_LINT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.lintExpectedOrActual = AnyExpectedOrActual.lintExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_USINT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.usintExpectedOrActual = AnyExpectedOrActual.usintExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_UINT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.uintExpectedOrActual = AnyExpectedOrActual.uintExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_UDINT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.udintExpectedOrActual = AnyExpectedOrActual.udintExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_ULINT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.ulintExpectedOrActual = AnyExpectedOrActual.ulintExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_REAL :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.realExpectedOrActual = AnyExpectedOrActual.realExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_LREAL :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.lrealExpectedOrActual = AnyExpectedOrActual.lrealExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_STRING :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.stringExpectedOrActual = AnyExpectedOrActual.stringExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_WSTRING :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.wstringExpectedOrActual = AnyExpectedOrActual.wstringExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_TIME :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.timeExpectedOrActual = AnyExpectedOrActual.timeExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_DATE :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.dateExpectedOrActual = AnyExpectedOrActual.dateExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_DATEANDTIME :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.dateandtimeExpectedOrActual = AnyExpectedOrActual.dateandtimeExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_TIMEOFDAY :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.timeofdayExpectedOrActual = AnyExpectedOrActual.timeofdayExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_POINTER :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_REFERENCE :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_SUBRANGE :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ENUM :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ARRAY :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_PARAMS :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_USERDEF :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_NONE :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ANY :
        (* Even though the data input of the ExpectedOrActual is ANY, this CASE-switch will never
           enter this case, but instead the type-class that it is an instance of. So for instance,
           if the ExpectedOrActual is an instance of INT, this case-switch will enter the 
           IBaseLibrary.TypeClass.TYPE_INT case. *)
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ANYBIT :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ANYDATE :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ANYINT :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ANYNUM :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ANYREAL :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_LAZY :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_LTIME :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.ltimeExpectedOrActual = AnyExpectedOrActual.ltimeExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_BITCONST :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_INTERFACE :
        F_IsAnyEqualToUnionValue := FALSE;

    ELSE
        F_IsAnyEqualToUnionValue := FALSE;
END_CASE]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>